# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Person types

class PersonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Person create method"""
    id: _int
    Cards: 'CardCreateManyNestedWithoutRelationsInput'
    Tags: 'TagCreateManyNestedWithoutRelationsInput'


class PersonCreateInput(PersonOptionalCreateInput):
    """Required arguments to the Person create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PersonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Person create method, without relations"""
    id: _int


class PersonCreateWithoutRelationsInput(PersonOptionalCreateWithoutRelationsInput):
    """Required arguments to the Person create method, without relations"""
    name: _str


class PersonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PersonCreateWithoutRelationsInput'
    connect: 'PersonWhereUniqueInput'


class PersonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PersonCreateWithoutRelationsInput', List['PersonCreateWithoutRelationsInput']]
    connect: Union['PersonWhereUniqueInput', List['PersonWhereUniqueInput']]


_PersonWhereUnique_id_Input = TypedDict(
    '_PersonWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

PersonWhereUniqueInput = _PersonWhereUnique_id_Input


class PersonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    Cards: 'CardUpdateManyWithoutRelationsInput'
    Tags: 'TagUpdateManyWithoutRelationsInput'


class PersonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class PersonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PersonCreateWithoutRelationsInput']
    connect: List['PersonWhereUniqueInput']
    set: List['PersonWhereUniqueInput']
    disconnect: List['PersonWhereUniqueInput']
    delete: List['PersonWhereUniqueInput']

    # TODO
    # update: List['PersonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PersonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PersonScalarWhereInput']
    # upsert: List['PersonUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PersonCreateOrConnectWithoutRelationsInput']


class PersonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PersonCreateWithoutRelationsInput'
    connect: 'PersonWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PersonUpdateInput'
    # upsert: 'PersonUpsertWithoutRelationsInput'
    # connectOrCreate: 'PersonCreateOrConnectWithoutRelationsInput'


class PersonUpsertInput(TypedDict):
    create: 'PersonCreateInput'
    update: 'PersonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Person_id_OrderByInput = TypedDict(
    '_Person_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Person_name_OrderByInput = TypedDict(
    '_Person_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

PersonOrderByInput = Union[
    '_Person_id_OrderByInput',
    '_Person_name_OrderByInput',
]



# recursive Person types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PersonRelationFilter = TypedDict(
    'PersonRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PersonListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PersonInclude(TypedDict, total=False):
    """Person relational arguments"""
    Cards: Union[bool, 'FindManyCardArgsFromPerson']
    Tags: Union[bool, 'FindManyTagArgsFromPerson']


    

class PersonIncludeFromPerson(TypedDict, total=False):
    """Relational arguments for Person"""
    Cards: Union[bool, 'FindManyCardArgsFromPersonRecursive1']
    Tags: Union[bool, 'FindManyTagArgsFromPersonRecursive1']


class PersonIncludeFromPersonRecursive1(TypedDict, total=False):
    """Relational arguments for Person"""
    Cards: Union[bool, 'FindManyCardArgsFromPersonRecursive2']
    Tags: Union[bool, 'FindManyTagArgsFromPersonRecursive2']


class PersonIncludeFromPersonRecursive2(TypedDict, total=False):
    """Relational arguments for Person"""
    Cards: Union[bool, 'FindManyCardArgsFromPersonRecursive3']
    Tags: Union[bool, 'FindManyTagArgsFromPersonRecursive3']


class PersonIncludeFromPersonRecursive3(TypedDict, total=False):
    """Relational arguments for Person"""
    Cards: Union[bool, 'FindManyCardArgsFromPersonRecursive4']
    Tags: Union[bool, 'FindManyTagArgsFromPersonRecursive4']


class PersonIncludeFromPersonRecursive4(TypedDict, total=False):
    """Relational arguments for Person"""

    

class PersonArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    include: 'PersonIncludeFromPersonRecursive1'


class PersonArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    include: 'PersonIncludeFromPersonRecursive2'


class PersonArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    include: 'PersonIncludeFromPersonRecursive3'


class PersonArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    include: 'PersonIncludeFromPersonRecursive4'


class PersonArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    
    

class FindManyPersonArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive1'


class FindManyPersonArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive2'


class FindManyPersonArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive3'


class FindManyPersonArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive4'


class FindManyPersonArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    
    

class CardIncludeFromPerson(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive1']


class CardIncludeFromPersonRecursive1(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive2']


class CardIncludeFromPersonRecursive2(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive3']


class CardIncludeFromPersonRecursive3(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive4']


class CardIncludeFromPersonRecursive4(TypedDict, total=False):
    """Relational arguments for Person"""

    

class CardArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    include: 'CardIncludeFromCardRecursive1'


class CardArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    include: 'CardIncludeFromCardRecursive2'


class CardArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    include: 'CardIncludeFromCardRecursive3'


class CardArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    include: 'CardIncludeFromCardRecursive4'


class CardArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    
    

class FindManyCardArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive1'


class FindManyCardArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive2'


class FindManyCardArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive3'


class FindManyCardArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive4'


class FindManyCardArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    
    

class TagIncludeFromPerson(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive1']


class TagIncludeFromPersonRecursive1(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive2']


class TagIncludeFromPersonRecursive2(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive3']


class TagIncludeFromPersonRecursive3(TypedDict, total=False):
    """Relational arguments for Person"""
    person: Union[bool, 'PersonArgsFromPersonRecursive4']


class TagIncludeFromPersonRecursive4(TypedDict, total=False):
    """Relational arguments for Person"""

    

class TagArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    
    

class FindManyTagArgsFromPerson(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromPersonRecursive1(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromPersonRecursive2(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromPersonRecursive3(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromPersonRecursive4(TypedDict, total=False):
    """Arguments for Person"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    


FindManyPersonArgs = FindManyPersonArgsFromPerson
FindFirstPersonArgs = FindManyPersonArgsFromPerson


    

class PersonWhereInput(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    Cards: 'CardListRelationFilter'
    Tags: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['PersonWhereInputRecursive1', List['PersonWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PersonWhereInputRecursive1']
    OR: List['PersonWhereInputRecursive1']
    NOT: List['PersonWhereInputRecursive1']


class PersonWhereInputRecursive1(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    Cards: 'CardListRelationFilter'
    Tags: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['PersonWhereInputRecursive2', List['PersonWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PersonWhereInputRecursive2']
    OR: List['PersonWhereInputRecursive2']
    NOT: List['PersonWhereInputRecursive2']


class PersonWhereInputRecursive2(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    Cards: 'CardListRelationFilter'
    Tags: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['PersonWhereInputRecursive3', List['PersonWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PersonWhereInputRecursive3']
    OR: List['PersonWhereInputRecursive3']
    NOT: List['PersonWhereInputRecursive3']


class PersonWhereInputRecursive3(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    Cards: 'CardListRelationFilter'
    Tags: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['PersonWhereInputRecursive4', List['PersonWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PersonWhereInputRecursive4']
    OR: List['PersonWhereInputRecursive4']
    NOT: List['PersonWhereInputRecursive4']


class PersonWhereInputRecursive4(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    Cards: 'CardListRelationFilter'
    Tags: 'TagListRelationFilter'



# aggregate Person types


    

class PersonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PersonScalarWhereWithAggregatesInputRecursive1']
    OR: List['PersonScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PersonScalarWhereWithAggregatesInputRecursive1']


class PersonScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PersonScalarWhereWithAggregatesInputRecursive2']
    OR: List['PersonScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PersonScalarWhereWithAggregatesInputRecursive2']


class PersonScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PersonScalarWhereWithAggregatesInputRecursive3']
    OR: List['PersonScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PersonScalarWhereWithAggregatesInputRecursive3']


class PersonScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PersonScalarWhereWithAggregatesInputRecursive4']
    OR: List['PersonScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PersonScalarWhereWithAggregatesInputRecursive4']


class PersonScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Person arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class PersonGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'PersonSumAggregateOutput'
    _avg: 'PersonAvgAggregateOutput'
    _min: 'PersonMinAggregateOutput'
    _max: 'PersonMaxAggregateOutput'
    _count: 'PersonCountAggregateOutput'


class PersonAvgAggregateOutput(TypedDict, total=False):
    """Person output for aggregating averages"""
    id: float


class PersonSumAggregateOutput(TypedDict, total=False):
    """Person output for aggregating sums"""
    id: _int


class PersonScalarAggregateOutput(TypedDict, total=False):
    """Person output including scalar fields"""
    id: _int
    name: _str


PersonMinAggregateOutput = PersonScalarAggregateOutput
PersonMaxAggregateOutput = PersonScalarAggregateOutput


class PersonMaxAggregateInput(TypedDict, total=False):
    """Person input for aggregating by max"""
    id: bool
    name: bool


class PersonMinAggregateInput(TypedDict, total=False):
    """Person input for aggregating by min"""
    id: bool
    name: bool


class PersonNumberAggregateInput(TypedDict, total=False):
    """Person input for aggregating numbers"""
    id: bool


PersonAvgAggregateInput = PersonNumberAggregateInput
PersonSumAggregateInput = PersonNumberAggregateInput


PersonCountAggregateInput = TypedDict(
    'PersonCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

PersonCountAggregateOutput = TypedDict(
    'PersonCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


PersonKeys = Literal[
    'id',
    'name',
    'Cards',
    'Tags',
]
PersonScalarFieldKeys = Literal[
    'id',
    'name',
]
PersonScalarFieldKeysT = TypeVar('PersonScalarFieldKeysT', bound=PersonScalarFieldKeys)

PersonRelationalFieldKeys = Literal[
        'Cards',
        'Tags',
    ]

# Card types

class CardOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Card create method"""
    id: _int
    personId: _int
    person: 'PersonCreateNestedWithoutRelationsInput'


class CardCreateInput(CardOptionalCreateInput):
    """Required arguments to the Card create method"""
    name: _str
    uid: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CardOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Card create method, without relations"""
    id: _int
    personId: _int


class CardCreateWithoutRelationsInput(CardOptionalCreateWithoutRelationsInput):
    """Required arguments to the Card create method, without relations"""
    name: _str
    uid: _str


class CardCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CardCreateWithoutRelationsInput'
    connect: 'CardWhereUniqueInput'


class CardCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CardCreateWithoutRelationsInput', List['CardCreateWithoutRelationsInput']]
    connect: Union['CardWhereUniqueInput', List['CardWhereUniqueInput']]


_CardWhereUnique_id_Input = TypedDict(
    '_CardWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_CardWhereUnique_uid_Input = TypedDict(
    '_CardWhereUnique_uid_Input',
    {
        'uid': '_str',
    },
    total=True
)

CardWhereUniqueInput = Union[
    '_CardWhereUnique_id_Input',
    '_CardWhereUnique_uid_Input',
]


class CardUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    uid: _str
    person: 'PersonUpdateOneWithoutRelationsInput'


class CardUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    uid: _str


class CardUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CardCreateWithoutRelationsInput']
    connect: List['CardWhereUniqueInput']
    set: List['CardWhereUniqueInput']
    disconnect: List['CardWhereUniqueInput']
    delete: List['CardWhereUniqueInput']

    # TODO
    # update: List['CardUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CardUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CardScalarWhereInput']
    # upsert: List['CardUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CardCreateOrConnectWithoutRelationsInput']


class CardUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CardCreateWithoutRelationsInput'
    connect: 'CardWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CardUpdateInput'
    # upsert: 'CardUpsertWithoutRelationsInput'
    # connectOrCreate: 'CardCreateOrConnectWithoutRelationsInput'


class CardUpsertInput(TypedDict):
    create: 'CardCreateInput'
    update: 'CardUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Card_id_OrderByInput = TypedDict(
    '_Card_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Card_name_OrderByInput = TypedDict(
    '_Card_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Card_uid_OrderByInput = TypedDict(
    '_Card_uid_OrderByInput',
    {
        'uid': 'SortOrder',
    },
    total=True
)

_Card_personId_OrderByInput = TypedDict(
    '_Card_personId_OrderByInput',
    {
        'personId': 'SortOrder',
    },
    total=True
)

CardOrderByInput = Union[
    '_Card_id_OrderByInput',
    '_Card_name_OrderByInput',
    '_Card_uid_OrderByInput',
    '_Card_personId_OrderByInput',
]



# recursive Card types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CardRelationFilter = TypedDict(
    'CardRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CardListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CardInclude(TypedDict, total=False):
    """Card relational arguments"""
    person: Union[bool, 'PersonArgsFromCard']


    

class PersonIncludeFromCard(TypedDict, total=False):
    """Relational arguments for Card"""
    Cards: Union[bool, 'FindManyCardArgsFromCardRecursive1']
    Tags: Union[bool, 'FindManyTagArgsFromCardRecursive1']


class PersonIncludeFromCardRecursive1(TypedDict, total=False):
    """Relational arguments for Card"""
    Cards: Union[bool, 'FindManyCardArgsFromCardRecursive2']
    Tags: Union[bool, 'FindManyTagArgsFromCardRecursive2']


class PersonIncludeFromCardRecursive2(TypedDict, total=False):
    """Relational arguments for Card"""
    Cards: Union[bool, 'FindManyCardArgsFromCardRecursive3']
    Tags: Union[bool, 'FindManyTagArgsFromCardRecursive3']


class PersonIncludeFromCardRecursive3(TypedDict, total=False):
    """Relational arguments for Card"""
    Cards: Union[bool, 'FindManyCardArgsFromCardRecursive4']
    Tags: Union[bool, 'FindManyTagArgsFromCardRecursive4']


class PersonIncludeFromCardRecursive4(TypedDict, total=False):
    """Relational arguments for Card"""

    

class PersonArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    include: 'PersonIncludeFromPersonRecursive1'


class PersonArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    include: 'PersonIncludeFromPersonRecursive2'


class PersonArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    include: 'PersonIncludeFromPersonRecursive3'


class PersonArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    include: 'PersonIncludeFromPersonRecursive4'


class PersonArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    
    

class FindManyPersonArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive1'


class FindManyPersonArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive2'


class FindManyPersonArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive3'


class FindManyPersonArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive4'


class FindManyPersonArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    
    

class CardIncludeFromCard(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive1']


class CardIncludeFromCardRecursive1(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive2']


class CardIncludeFromCardRecursive2(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive3']


class CardIncludeFromCardRecursive3(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive4']


class CardIncludeFromCardRecursive4(TypedDict, total=False):
    """Relational arguments for Card"""

    

class CardArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    include: 'CardIncludeFromCardRecursive1'


class CardArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    include: 'CardIncludeFromCardRecursive2'


class CardArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    include: 'CardIncludeFromCardRecursive3'


class CardArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    include: 'CardIncludeFromCardRecursive4'


class CardArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    
    

class FindManyCardArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive1'


class FindManyCardArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive2'


class FindManyCardArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive3'


class FindManyCardArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive4'


class FindManyCardArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    
    

class TagIncludeFromCard(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive1']


class TagIncludeFromCardRecursive1(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive2']


class TagIncludeFromCardRecursive2(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive3']


class TagIncludeFromCardRecursive3(TypedDict, total=False):
    """Relational arguments for Card"""
    person: Union[bool, 'PersonArgsFromCardRecursive4']


class TagIncludeFromCardRecursive4(TypedDict, total=False):
    """Relational arguments for Card"""

    

class TagArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    
    

class FindManyTagArgsFromCard(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromCardRecursive1(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromCardRecursive2(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromCardRecursive3(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromCardRecursive4(TypedDict, total=False):
    """Arguments for Card"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    


FindManyCardArgs = FindManyCardArgsFromCard
FindFirstCardArgs = FindManyCardArgsFromCard


    

class CardWhereInput(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['CardWhereInputRecursive1', List['CardWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CardWhereInputRecursive1']
    OR: List['CardWhereInputRecursive1']
    NOT: List['CardWhereInputRecursive1']


class CardWhereInputRecursive1(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['CardWhereInputRecursive2', List['CardWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CardWhereInputRecursive2']
    OR: List['CardWhereInputRecursive2']
    NOT: List['CardWhereInputRecursive2']


class CardWhereInputRecursive2(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['CardWhereInputRecursive3', List['CardWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CardWhereInputRecursive3']
    OR: List['CardWhereInputRecursive3']
    NOT: List['CardWhereInputRecursive3']


class CardWhereInputRecursive3(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['CardWhereInputRecursive4', List['CardWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CardWhereInputRecursive4']
    OR: List['CardWhereInputRecursive4']
    NOT: List['CardWhereInputRecursive4']


class CardWhereInputRecursive4(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'



# aggregate Card types


    

class CardScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CardScalarWhereWithAggregatesInputRecursive1']
    OR: List['CardScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CardScalarWhereWithAggregatesInputRecursive1']


class CardScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CardScalarWhereWithAggregatesInputRecursive2']
    OR: List['CardScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CardScalarWhereWithAggregatesInputRecursive2']


class CardScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CardScalarWhereWithAggregatesInputRecursive3']
    OR: List['CardScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CardScalarWhereWithAggregatesInputRecursive3']


class CardScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CardScalarWhereWithAggregatesInputRecursive4']
    OR: List['CardScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CardScalarWhereWithAggregatesInputRecursive4']


class CardScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Card arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']



class CardGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    uid: _str
    personId: _int
    _sum: 'CardSumAggregateOutput'
    _avg: 'CardAvgAggregateOutput'
    _min: 'CardMinAggregateOutput'
    _max: 'CardMaxAggregateOutput'
    _count: 'CardCountAggregateOutput'


class CardAvgAggregateOutput(TypedDict, total=False):
    """Card output for aggregating averages"""
    id: float
    personId: float


class CardSumAggregateOutput(TypedDict, total=False):
    """Card output for aggregating sums"""
    id: _int
    personId: _int


class CardScalarAggregateOutput(TypedDict, total=False):
    """Card output including scalar fields"""
    id: _int
    name: _str
    uid: _str
    personId: _int


CardMinAggregateOutput = CardScalarAggregateOutput
CardMaxAggregateOutput = CardScalarAggregateOutput


class CardMaxAggregateInput(TypedDict, total=False):
    """Card input for aggregating by max"""
    id: bool
    name: bool
    uid: bool
    personId: bool


class CardMinAggregateInput(TypedDict, total=False):
    """Card input for aggregating by min"""
    id: bool
    name: bool
    uid: bool
    personId: bool


class CardNumberAggregateInput(TypedDict, total=False):
    """Card input for aggregating numbers"""
    id: bool
    personId: bool


CardAvgAggregateInput = CardNumberAggregateInput
CardSumAggregateInput = CardNumberAggregateInput


CardCountAggregateInput = TypedDict(
    'CardCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'uid': bool,
        'personId': bool,
        '_all': bool,
    },
    total=False,
)

CardCountAggregateOutput = TypedDict(
    'CardCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'uid': int,
        'personId': int,
        '_all': int,
    },
    total=False,
)


CardKeys = Literal[
    'id',
    'name',
    'uid',
    'personId',
    'person',
]
CardScalarFieldKeys = Literal[
    'id',
    'name',
    'uid',
    'personId',
]
CardScalarFieldKeysT = TypeVar('CardScalarFieldKeysT', bound=CardScalarFieldKeys)

CardRelationalFieldKeys = Literal[
        'person',
    ]

# Tag types

class TagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tag create method"""
    id: _int
    personId: _int
    person: 'PersonCreateNestedWithoutRelationsInput'


class TagCreateInput(TagOptionalCreateInput):
    """Required arguments to the Tag create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tag create method, without relations"""
    id: _int
    personId: _int


class TagCreateWithoutRelationsInput(TagOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tag create method, without relations"""
    name: _str


class TagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'


class TagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TagCreateWithoutRelationsInput', List['TagCreateWithoutRelationsInput']]
    connect: Union['TagWhereUniqueInput', List['TagWhereUniqueInput']]


_TagWhereUnique_id_Input = TypedDict(
    '_TagWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

TagWhereUniqueInput = _TagWhereUnique_id_Input


class TagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    person: 'PersonUpdateOneWithoutRelationsInput'


class TagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class TagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TagCreateWithoutRelationsInput']
    connect: List['TagWhereUniqueInput']
    set: List['TagWhereUniqueInput']
    disconnect: List['TagWhereUniqueInput']
    delete: List['TagWhereUniqueInput']

    # TODO
    # update: List['TagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TagScalarWhereInput']
    # upsert: List['TagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TagCreateOrConnectWithoutRelationsInput']


class TagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TagUpdateInput'
    # upsert: 'TagUpsertWithoutRelationsInput'
    # connectOrCreate: 'TagCreateOrConnectWithoutRelationsInput'


class TagUpsertInput(TypedDict):
    create: 'TagCreateInput'
    update: 'TagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tag_id_OrderByInput = TypedDict(
    '_Tag_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tag_name_OrderByInput = TypedDict(
    '_Tag_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Tag_personId_OrderByInput = TypedDict(
    '_Tag_personId_OrderByInput',
    {
        'personId': 'SortOrder',
    },
    total=True
)

TagOrderByInput = Union[
    '_Tag_id_OrderByInput',
    '_Tag_name_OrderByInput',
    '_Tag_personId_OrderByInput',
]



# recursive Tag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TagRelationFilter = TypedDict(
    'TagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TagInclude(TypedDict, total=False):
    """Tag relational arguments"""
    person: Union[bool, 'PersonArgsFromTag']


    

class PersonIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    Cards: Union[bool, 'FindManyCardArgsFromTagRecursive1']
    Tags: Union[bool, 'FindManyTagArgsFromTagRecursive1']


class PersonIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    Cards: Union[bool, 'FindManyCardArgsFromTagRecursive2']
    Tags: Union[bool, 'FindManyTagArgsFromTagRecursive2']


class PersonIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    Cards: Union[bool, 'FindManyCardArgsFromTagRecursive3']
    Tags: Union[bool, 'FindManyTagArgsFromTagRecursive3']


class PersonIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    Cards: Union[bool, 'FindManyCardArgsFromTagRecursive4']
    Tags: Union[bool, 'FindManyTagArgsFromTagRecursive4']


class PersonIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class PersonArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PersonIncludeFromPersonRecursive1'


class PersonArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PersonIncludeFromPersonRecursive2'


class PersonArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PersonIncludeFromPersonRecursive3'


class PersonArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PersonIncludeFromPersonRecursive4'


class PersonArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyPersonArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive1'


class FindManyPersonArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive2'


class FindManyPersonArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive3'


class FindManyPersonArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    include: 'PersonIncludeFromPersonRecursive4'


class FindManyPersonArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PersonOrderByInput', List['PersonOrderByInput']]
    where: 'PersonWhereInput'
    cursor: 'PersonWhereUniqueInput'
    distinct: List['PersonScalarFieldKeys']
    
    

class CardIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive1']


class CardIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive2']


class CardIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive3']


class CardIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive4']


class CardIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class CardArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CardIncludeFromCardRecursive1'


class CardArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CardIncludeFromCardRecursive2'


class CardArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CardIncludeFromCardRecursive3'


class CardArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CardIncludeFromCardRecursive4'


class CardArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyCardArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive1'


class FindManyCardArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive2'


class FindManyCardArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive3'


class FindManyCardArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    include: 'CardIncludeFromCardRecursive4'


class FindManyCardArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CardOrderByInput', List['CardOrderByInput']]
    where: 'CardWhereInput'
    cursor: 'CardWhereUniqueInput'
    distinct: List['CardScalarFieldKeys']
    
    

class TagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive1']


class TagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive2']


class TagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive3']


class TagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    person: Union[bool, 'PersonArgsFromTagRecursive4']


class TagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class TagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    


FindManyTagArgs = FindManyTagArgsFromTag
FindFirstTagArgs = FindManyTagArgsFromTag


    

class TagWhereInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive1', List['TagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive1']
    OR: List['TagWhereInputRecursive1']
    NOT: List['TagWhereInputRecursive1']


class TagWhereInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive2', List['TagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive2']
    OR: List['TagWhereInputRecursive2']
    NOT: List['TagWhereInputRecursive2']


class TagWhereInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive3', List['TagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive3']
    OR: List['TagWhereInputRecursive3']
    NOT: List['TagWhereInputRecursive3']


class TagWhereInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive4', List['TagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive4']
    OR: List['TagWhereInputRecursive4']
    NOT: List['TagWhereInputRecursive4']


class TagWhereInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    personId: Union[_int, 'types.IntFilter']
    person: 'PersonRelationFilter'



# aggregate Tag types


    

class TagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive1']
    OR: List['TagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive1']


class TagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive2']
    OR: List['TagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive2']


class TagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive3']
    OR: List['TagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive3']


class TagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive4']
    OR: List['TagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive4']


class TagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    personId: Union[_int, 'types.IntWithAggregatesFilter']



class TagGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    personId: _int
    _sum: 'TagSumAggregateOutput'
    _avg: 'TagAvgAggregateOutput'
    _min: 'TagMinAggregateOutput'
    _max: 'TagMaxAggregateOutput'
    _count: 'TagCountAggregateOutput'


class TagAvgAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating averages"""
    id: float
    personId: float


class TagSumAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating sums"""
    id: _int
    personId: _int


class TagScalarAggregateOutput(TypedDict, total=False):
    """Tag output including scalar fields"""
    id: _int
    name: _str
    personId: _int


TagMinAggregateOutput = TagScalarAggregateOutput
TagMaxAggregateOutput = TagScalarAggregateOutput


class TagMaxAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by max"""
    id: bool
    name: bool
    personId: bool


class TagMinAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by min"""
    id: bool
    name: bool
    personId: bool


class TagNumberAggregateInput(TypedDict, total=False):
    """Tag input for aggregating numbers"""
    id: bool
    personId: bool


TagAvgAggregateInput = TagNumberAggregateInput
TagSumAggregateInput = TagNumberAggregateInput


TagCountAggregateInput = TypedDict(
    'TagCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'personId': bool,
        '_all': bool,
    },
    total=False,
)

TagCountAggregateOutput = TypedDict(
    'TagCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'personId': int,
        '_all': int,
    },
    total=False,
)


TagKeys = Literal[
    'id',
    'name',
    'personId',
    'person',
]
TagScalarFieldKeys = Literal[
    'id',
    'name',
    'personId',
]
TagScalarFieldKeysT = TypeVar('TagScalarFieldKeysT', bound=TagScalarFieldKeys)

TagRelationalFieldKeys = Literal[
        'person',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields
